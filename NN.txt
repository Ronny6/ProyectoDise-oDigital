#include <math.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include<string.h>


float *mapminmax(float input[])
{
    int i;
    float ymax=1,ymin=-1;
    float xmin[]={12.2356302322129,10.8162513186432,12.3364186022190,11.3064894194977,13.9082943745708,14.0792438812592,11.9695734777523,13.9726876678549,12.6803172660656,13.0019074120488,11.3610047142716,16.6023136815537,11.9722724239405,13.8950272686693,14.4463036107196,17.8919226833269,15.1841975777976,14.9680819584171,12.3474259855781,10.3226717527886,15.4924454351303,9.48543311535078,14.4463036107196};
    float xmax[]={208.337458869363,179.405850695321,131.862106860152,147.723127612868,180.381242266611,154.473833136061,97.6604679199842,112.501816406239,154.452209614555,176.383636358386,179.608018034323,151.074967723784,157.432589967516,209.994643659915,140.851536088959,170.678800158635,190.083596953794,268.175028893079,131.867450632909,168.221644166259,243.936851536452,230.197484228679,140.851536088959};
    static float output[23];
    for(i=0;i<23;i++)
    {
        output[i]=((ymax-ymin)/(xmax[i]-xmin[i]))*(input[i]-xmin[i])+ymin;
    }
    return output;
}
/*=======  producto punto =========*/
float DotProduct(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=23;i++)
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  tangente sigmoidal =========*/
float tansig(float input1)
{
    float tansigout=(2/(1+exp(-2*input1))-1);
    return tansigout;
}
/*=======  hidden layer =========*/
float *layer1(float *input1)
{
    float static output[10];
    float w0[]={0.11633066636677918959,0.34829378020831980312,0.056216497681745400405,0.52199941509269209838,-0.01291862871707146615,-0.28166097201463607957,0.40426532367721240702,0.4685014451320868023,-0.047815094649630282553,0.33428278609489375794,-0.10110018818320889999,0.54715745025933304468,-0.5587014422059083385,0.027199104626677531038,-0.54296819138117524695,-0.55382921696372700016,-0.45904661167560950608,0.09291370427185208225,0.57570224263261327025,0.5552836333184032469,0.072884742359268006595,-0.27115024352553618314,-0.16957831255707728202};
    float w1[]={-0.034250793577956406555,0.20823970102605207644,-0.42131095946942581643,0.27247932791427886823,0.4972801175584642408,-0.5956064367651138225,-0.024872763631942435003,-0.1141473333300295212,0.046489442755670240537,0.45499094868587075524,0.11926789404674870143,-0.47334411947435872658,-0.51735569812820914049,-0.38062264267295142783,-0.46769043509776397904,-0.0020604676719819343608,-0.30695211806551991884,-0.056536615837360866543,0.33697048469322943287,-0.33845194361814445738,-0.32964566424802882461,-0.22388720894754762791,-0.18482737716695826768};
    float w2[]={-0.50230889850820059639,0.10060429509281729188,0.39560334390020535089,-0.72508397615092756716,-0.92461354091795910914,-0.27343817816958065903,0.15727936266406342125,-0.67524497849680442663,-0.23164639270734960208,-0.81272276675651711209,-0.31215924633499320118,0.085223179836869777937,0.1464624002647121892,-0.49384263619673740564,-0.55916732969958882205,-0.73293633376238132016,0.63018965550110772611,0.11328366112993873416,-0.30065898606193947051,0.022947550458130933082,-0.046055426152885485525,-0.87015678778102778512,-0.45990745700856505707};
    float w3[]={-0.48198888585113064398,-0.14070764604938817977,0.19065070877537992899,-0.053575158827134809758,0.2471542132103220768,-0.30398456249164867993,-0.0069095271835044463904,0.19416386278002378818,-0.59190401346476229083,0.032738837697303818652,-0.22617421325619080363,-0.13374866162993581664,-0.70969315238690855452,0.10874302499935924182,-0.21610089375676722057,0.51709986656468664989,0.28217632052990088143,0.027718164592761350418,-0.23239659870277767917,0.42861169152094041879,0.47617329409559577824,0.4589829725029602181,-0.10935774113669677332};
    float w4[]={-0.28188971232971299363,0.57481924827114461163,0.071207551310247224619,0.72028275791601525935,0.89561446223554486146,-0.63733090932736136125,-0.11784689914659798871,0.98214483069515934321,1.4003060191240330745,1.5338768219617959776,1.2326336109936466556,-0.86528640059858852318,0.79894013937807484282,1.5090194109942698386,-0.37909819981535741729,0.85883892032403486017,0.96791319646918749786,0.52222118470796818901,0.22773802149563354691,-0.19405956829818832299,-0.27364309392264979381,-1.2212990079366397023,-1.1973370377082017679};
    float w5[]={0.40763969248484588359,-2.0585829737817977758,0.3228183071054653297,-0.54321529863425177531,-0.15794246353440194452,0.7877801264437999107,0.99645064892344115126,0.20400643136668303312,-1.0530429236938294579,-0.77388002221373708434,-0.98560915994582953825,-1.3155802274404868601,0.78472278449197374606,-1.202620214262152043,-1.2341283981256156999,0.73145663477383859874,0.5910971581172360656,-0.34088877940797385202,0.058321084149865975998,0.94823734289190098057,-1.3652963052595457061,0.19450583217157940696,-0.93908280404612576309};
    float w6[]={-0.49474658384236352981,-0.23430884596843476464,-0.53239445844411970032,-0.18402503517543006284,-0.08823115155792478348,-0.26815547721757437838,0.41522240536274801492,0.077909265767985860784,-0.86307335578835153722,-0.50462162739725613392,-0.09786208636050530707,0.0051134994660107305209,-0.62737704293584395376,-0.26842863304573721939,-1.0017960249844604093,-0.52511109632265329239,-0.86741025350395617455,0.0068660910526575358315,0.090882467102419123295,-0.48258542478380400675,-0.62562514360972409921,-0.32073487459279259593,0.016454580629406023728};
    float w7[]={-0.40480477520792956803,0.21631307501775454138,-0.065994726743904219557,0.16674915799024384033,-0.16991513062796925748,-0.031570850422526372525,0.15793006147727545185,-0.049674911277137190346,0.51467803749195772944,0.099134155875951548986,0.35589953087076370286,0.41599642966677718992,0.29495828881095431662,-0.31604767951802925641,-0.20904130778363533283,0.1536161071917395704,-0.21513671183746446713,0.28282315849199468616,0.58564086094001510663,-0.33482192374915303867,-0.23779313011497416053,-0.47464536295757497886,-0.39976530053592251868};
	float w8[]={0.28451629922492099878,0.18913967599334863268,0.38433763830414324758,0.62073201020512402959,-0.25570133118663412874,0.094333857697553882837,0.26722119459341764358,0.49221522622555813342,0.087340640865605972953,0.30418645261241933353,-0.36431857751184237859,-0.00087317594620623870116,-0.66331692966781719001,-0.18931008878799529538,-0.11145267538515915562,-0.36025475698069248098,0.24749385522648723046,0.44373686573701676128,0.23365315010813006436,0.32329327195465457079,0.33019162820421554816,0.38152535267868736835,-0.068809770434245631776};
	float w9[]={0.4497016746782515062,0.26887258337807407038,-0.10178011243595236346,-0.29424265223334172825,0.085226049425658700898,-0.6602656889771022497,-0.39089308664351990474,-0.72215055092687885363,0.49439907596123899847,0.19306325029134388527,0.69299394322671248325,0.13788090015897166984,0.59205474149860493061,0.35941627265721554085,-0.5789036338556995398,-0.24843570307671522523,0.45828020891579218654,0.88239472505691174398,-0.30818218681277237403,0.27948940913795522478,0.79249481863843962426,-0.24009112443666050241,-0.12073130188756615866};
	output[0]=tansig(DotProduct(input1,w0)+(-1.5913758624952341059));
    output[1]=tansig(DotProduct(input1,w1)+(-1.1629834106350780409));
    output[2]=tansig(DotProduct(input1,w2)+(-0.45075008784550540941));
    output[3]=tansig(DotProduct(input1,w3)+(0.33976660653632678732));
    output[4]=tansig(DotProduct(input1,w4)+(0.029987691790885583065));
    output[5]=tansig(DotProduct(input1,w5)+(-0.22291720772872908318));
    output[6]=tansig(DotProduct(input1,w6)+(0.31165122144675927451));
    output[7]=tansig(DotProduct(input1,w7)+(-0.95180849427529556905));
    output[8]=tansig(DotProduct(input1,w8)+(1.1897809461902904005));
	output[9]=tansig(DotProduct(input1,w9)+(-1.8530567327345657258));
    return output;
}
/*=======  producto punto =========*/
float DotProduct1(float input1[], float input2[])
{
    int i=0;
    float acumulador=0;
    for (i=0;i!=10;i++)
    {
        acumulador=input1[i]*input2[i]+acumulador;
    }
    return acumulador;
}
/*=======  funcion mapminreverse =========*/
float mapminreverse(float input)
{
    float ymax=1,ymin=-1;
    float xmin=0;
    float xmax=1;
    static float output;
    output=((xmax-xmin)/(ymax-ymin))*(input-ymin)+xmin;
    return output;
}
/*=======  output layer =========*/
float layer2(float *input1)
{
    float static output1;
    float w0[]={0.57293180706428892268,-0.020742763388903261157,1.5016300565470048767,-0.073295335605642539245,1.6406433111692142468,-2.2541795042180750031,1.3461623773763928824,-0.0055863310810660357641,-0.061878997850870295916,-1.1449154376164629721};
    output1=DotProduct1(input1,w0)+(-0.53465780048275168834);
	return mapminreverse(output1);
}



int main(void) {

	char s[150] = ",72.30,58.55,69.47,51.25,82.33,73.77,75.98,100.30,79.72,91.18,93.17,91.55,93.36,103.46,99.05,124.94,94.12,160.95,69.46,48.74,151.12,63.96,99.05,1.0," ;
	char b[5]= "00000";
	char d[3]= "000";
	float niNN[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	float input1[23];
	float input2[10];
	float r;
	int n;
	int c;
	int i;
	int index_max=0;
	int vector_index= 0;
	int index_min = 0;
	int cc= 0;
	int real;

	for (i = 1; i < 150; ++i)
	  {
		  if ((s[i] == ',') && (i>1))
		  {
			  cc++;
			  if (cc < 24) {
			  index_max = i;
			  c = 0;
			  while (c < index_max-index_min-1) {
					b[c] = s[index_min+c+1];
					c++;
				  }
			  index_min = index_max;
			  r = atof(b);
			  niNN[vector_index]= r;
			  vector_index++;
			  }

			  else{
				  index_max = i;
				  c = 0;
				  while (c < index_max-index_min-1) {
						d[c] = s[index_min+c+1];
						c++;
					  }
				  index_min = index_max;
				  real = atof(d);
			  }

		  }
	  }


	 float *GPP1=mapminmax(niNN);

	 for(n=0;n<23;n++)
		{
			input1[n]=GPP1[n];
		}
		float *GPP2=layer1(input1);
		for(n=0;n<10;n++)
		{
			input2[n]=GPP2[n];
		}
		float output=layer2(input2);
		if (output>0.8) {
			printf("Puede ocurrir un ataque en los proximos 10 segundos\n");
		}
		else {
			printf("Sin complicaciones\n");
		}
	printf("Valor predecido: %f\n",output);
	printf("Valor Real: %i\n",real);
	return EXIT_SUCCESS;
}